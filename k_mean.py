# -*- coding: utf-8 -*-
"""K_Mean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_EjQWWCH_HrarebFCDEFmNgbwgNci8nv
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import os

#import country data file
df = pd.read_csv('Country-data.csv')

df.head(10)

df.isnull().sum()

plt.figure(figsize=[20,15])
for i in enumerate(df.describe().columns):
    plt.subplot(3,3,i[0]+1)
    sns.boxplot(df[i[1]])

plt.show()

# scaling the data using standard scaler 
#scale the data
from sklearn.preprocessing import StandardScaler
df= df.iloc[:,1:]
sc = StandardScaler()
X = sc.fit_transform(df)
X

# K-Mean Clustering (Find optimal Clsuters)

from sklearn.cluster import KMeans

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i , init = 'k-means++', random_state = 5)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
wcss

plt.plot(range(1, 11), wcss)
plt.title('the Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.grid(True)
plt.show()

# By looking at the elbow graph, it can be seen that the optimal number of cluster is 3.

from sklearn.metrics import silhouette_score
range_n_clusters = [3]

for num_clusters in range_n_clusters:
    
    # intialise kmeans
    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)
    kmeans.fit(X)
    
    cluster_labels = kmeans.labels_
    
    # silhouette score
    silhouette_avg = silhouette_score(X, cluster_labels)
    print("For n_clusters={0}, the silhouette score is {1}".format(num_clusters, silhouette_avg))

kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 5)
y_hc = kmeans.fit_predict(X)
y_hc

df['Cluster']=y_hc

df['Cluster'].value_counts()

df_0=df[df['Cluster']==0] # underdeveloped Country
df_0



df_1=df[df['Cluster']==1] # developing country
df_1

df_2=df[df['Cluster']==2] # developed country
df_2

df['K_means_labels'] = kmeans.labels_
data.head()

plt.figure(figsize=[12,8])
sns.scatterplot(df.gdpp, df.income,hue = df.K_means_labels, palette='Set1')
plt.show()

plt.figure(figsize=[12,8])
sns.scatterplot(df.gdpp, df.child_mort,hue = df.K_means_labels, palette='Set1')
plt.show()